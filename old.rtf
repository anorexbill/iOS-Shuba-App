{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red178\green24\blue137;\red255\green255\blue255;\red0\green160\blue190;
\red131\green192\blue87;\red219\green44\blue56;\red120\green109\blue196;}
{\*\expandedcolortbl;;\csgenericrgb\c69800\c9500\c53600;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c62600\c74600;
\csgenericrgb\c51200\c75400\c34300;\csgenericrgb\c85900\c17100\c21900;\csgenericrgb\c46900\c42600\c77000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab543
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \CocoaLigature0 import\cf3  UIKit\
\cf2 import\cf3  Firebase\
\
\cf2 class\cf3  LocationsDetails: \cf4 UICollectionViewController\cf3 , \cf4 UICollectionViewDelegateFlowLayout\cf3  \{\
    \
    \cf2 var\cf3  drivers = [\cf5 Driver\cf3 ]()\
    \cf2 var\cf3  stop: \cf5 Stop\cf3 ? \{\
        \cf2 didSet\cf3  \{\
            \cf4 navigationItem\cf3 .\cf4 title\cf3  = \cf5 stop\cf3 ?.\cf5 stopName\cf3 \
           \
            \cf5 loadDrivers\cf3 ()\
        \}\
    \}\
    \
    \cf2 let\cf3  cellId = \cf6 "cellId"\cf3 \
    \
    \cf2 override\cf3  \cf2 func\cf3  viewDidLoad() \{\
        \cf2 super\cf3 .\cf4 viewDidLoad\cf3 ()\
        \
        \cf4 collectionView\cf3 ?.\cf4 backgroundColor\cf3  = \cf4 UIColor\cf3 .\cf4 white\cf3 \
        \cf4 collectionView\cf3 ?.\cf4 register\cf3 (\cf5 DetailsCell\cf3 .\cf2 self\cf3 , forCellWithReuseIdentifier: \cf5 cellId\cf3 )\
    \}\
    \
    \cf2 override\cf3  \cf2 func\cf3  collectionView(\cf2 _\cf3  collectionView: \cf4 UICollectionView\cf3 , numberOfItemsInSection section: \cf4 Int\cf3 ) -> \cf4 Int\cf3  \{\
        \cf2 return\cf3  \cf5 drivers\cf3 .\cf4 count\cf3 \
    \}\
    \
    \cf2 override\cf3  \cf2 func\cf3  collectionView(\cf2 _\cf3  collectionView: \cf4 UICollectionView\cf3 , cellForItemAt indexPath: \cf4 IndexPath\cf3 ) -> \cf4 UICollectionViewCell\cf3  \{\
        \cf2 let\cf3  cell = collectionView.\cf4 dequeueReusableCell\cf3 (withReuseIdentifier: \cf5 cellId\cf3 , for: indexPath) \cf2 as\cf3 ! \cf5 DetailsCell\cf3 \
        \
      \cf2 let\cf3  driver = \cf5 drivers\cf3 [indexPath.\cf4 item\cf3 ]\
        \
        cell.\cf5 textView\cf3 .\cf4 text\cf3  = driver.\cf5 driverName\cf3 \
        \
        \cf2 return\cf3  cell\
    \}\
    \
    \cf2 func\cf3  collectionView(\cf2 _\cf3  collectionView: \cf4 UICollectionView\cf3 , layout collectionViewLayout: \cf4 UICollectionViewLayout\cf3 , sizeForItemAt indexPath: \cf4 IndexPath\cf3 ) -> \cf4 CGSize\cf3  \{\
        \cf2 return\cf3  \cf4 CGSize\cf3 (width: \cf4 view\cf3 .\cf4 frame\cf3 .\cf4 width\cf3 , height: \cf7 80\cf3 )\
    \}\
    \cf2 func\cf3  collectionView(\cf2 _\cf3  collectionView: \cf4 UICollectionView\cf3 , layout collectionViewLayout: \cf4 UICollectionViewLayout\cf3 , minimumLineSpacingForSectionAt section: \cf4 Int\cf3 ) -> \cf4 CGFloat\cf3  \{\
        \cf2 return\cf3  \cf7 1\cf3 \
    \}\
    \
    \cf2 func\cf3  loadDrivers() \{\
    \
        \cf5 FIRDatabase\cf3 .\cf5 database\cf3 ().\cf5 reference\cf3 ().\cf5 child\cf3 (\cf6 "buses"\cf3 ).\cf5 observe\cf3 (.\cf5 childAdded\cf3 , with: \{ (snapshot) \cf2 in\cf3 \
            \
            \cf2 if\cf3  \cf2 let\cf3  dictionary = snapshot.\cf5 value\cf3  \cf2 as\cf3 ? [\cf4 String\cf3 : \cf4 AnyObject\cf3 ] \{\
               \cf2 let\cf3  driver = \cf5 Driver\cf3 ()\
                driver.\cf4 setValuesForKeys\cf3 (dictionary)\
                \cf2 self\cf3 .\cf5 drivers\cf3 .\cf4 append\cf3 (driver)\
                \
                \cf4 print\cf3 (driver.\cf5 driverName\cf3 !)\
                \
                \cf4 DispatchQueue\cf3 .\cf4 main\cf3 .\cf4 async\cf3  \{\
                    \cf2 self\cf3 .\cf4 collectionView\cf3 ?.\cf4 reloadData\cf3 ()\
                \}\
                \
            \
            \}\
        \}, withCancel: \cf2 nil\cf3 )\
    \
    \}\
    \
\}\
}